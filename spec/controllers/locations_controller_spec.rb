require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

RSpec.describe LocationsController, type: :controller do

  let!( :user ){ create(:user) }
  let!( :taster ){ create(:taster, user: user) }
  let!( :host ){ create(:host, taster: taster) }
  let!( :location ){ create(:location) }

  let(:create_attributes) {
    {
      phone: "555-555-5555",
      address: "123 Main St.",
      city: "MainTown",
      state: "CA",
      postal: "99999"
    }
  }

  let(:update_attributes) {
    {
      phone: "123-456-7890"
    }
  }

  # let(:invalid_attributes) {
  #   {
  #     animal: "aardvark"
  #   }
  # }

  context "Host only CRUD" do
    before do
      @request.env["devise.mapping"] = Devise.mappings[:user]
      sign_in user, scope: :user
    end
    describe "GET #index" do
      it "returns http success" do
        get :index
        expect(response).to have_http_status(:success)
      end
      it "assigns all locations as @locations" do
        get :index
        expect(assigns(:locations)).to eq([location])
      end
      it "renders #index template" do
        get :index
        expect(response).to render_template(:index)
      end
    end
    describe "GET #show" do
      it "returns http success" do
        get :show, params: {id: location.to_param}
        expect(response).to have_http_status(:success)
      end
      it "assigns the requested location as @location" do
        get :show, params: {id: location.to_param}
        expect(assigns(:location)).to eq(location)
      end
      it "renders #show template" do
        get :show, params: {id: location.to_param}
        expect(response).to render_template(:show)
      end
    end
    # describe "GET #new" do
    #   it "returns http success" do
    #     get :new
    #     expect(response).to have_http_status(:success)
    #   end
    #   it "assigns a new location as @location" do
    #     get :new
    #     expect(assigns(:location)).to be_a_new(Location)
    #   end
    #   it "renders #new template" do
    #     get :new
    #     expect(response).to render_template(:new)
    #   end
    # end
    # describe "GET #edit" do
    #   it "returns http success" do
    #     get :edit, params: {id: location.to_param}
    #     expect(response).to have_http_status(:success)
    #   end
    #   it "assigns the requested location as @location" do
    #     get :edit, params: {id: location.to_param}
    #     expect(assigns(:location)).to eq(location)
    #   end
    #   it "renders #edit template" do
    #     get :edit, params: {id: location.to_param}
    #     expect(response).to render_template(:edit)
    #   end
    # end
    describe "POST #create" do
      it "creates a new Location" do
        expect {
          post :create, params: {location: create_attributes}
        }.to change(Location, :count).by(1)
      end
      it "assigns a newly created location as @location" do
        post :create, params: {location: create_attributes}
        expect(assigns(:location)).to be_a(Location)
        expect(assigns(:location)).to be_persisted
      end
      it "redirects to the created location" do
        post :create, params: {location: create_attributes}
        expect(response).to redirect_to(Location.last)
      end
    end
    describe "POST #create_for_host" do
      it "creates a new Location" do
        expect {
          post :create_for_host, params: {location: create_attributes}
        }.to change(Location, :count).by(1)
      end
      it "assigns a newly created location as @location" do
        post :create_for_host, params: {location: create_attributes}
        expect(assigns(:location)).to be_a(Location)
        expect(assigns(:location)).to be_persisted
      end
      it "assigns a newly created host_location as @host_location" do
        post :create_for_host, params: {location: create_attributes}
        expect(assigns(:host_location)).to be_a(HostLocation)
        expect(assigns(:host_location)).to be_persisted
      end
      it "redirects to user#edit" do
        post :create_for_host, params: {location: create_attributes}
        expect(response).to redirect_to Location.last
      end
    end
    describe "PUT #update" do
      it "updates the requested location" do
        put :update, params: {id: location.to_param, location: update_attributes}
        location.reload
        expect(location.phone).to eq "123-456-7890"
      end
      it "assigns the requested location as @location" do
        put :update, params: {id: location.to_param, location: update_attributes}
        expect(assigns(:location)).to eq(location)
      end
      it "redirects to the location" do
        put :update, params: {id: location.to_param, location: update_attributes}
        expect(response).to redirect_to(location)
      end
    end
    describe "DELETE #destroy" do
      it "destroys the requested location" do
        expect {
          delete :destroy, params: {id: location.to_param}
        }.to change(Location, :count).by(-1)
      end
      it "redirects to the locations list" do
        delete :destroy, params: {id: location.to_param}
        expect(response).to redirect_to(locations_url)
      end
    end
  end # END HOST CRUD

end
